<?php

/**
 * @file
 * Hook implementations for HipChat so we can respond to various system events.
 */

/**
 * Implements hook_form_BASE_ID_alter().
 *
 * Adds node options to the hipchat module configuration page.
 */
function hipchat_node_form_hipchat_admin_form_alter(&$form, &$form_state) {
  $form['hipchat_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Only send notifications for these content types'),
    '#default_value' => variable_get('hipchat_content_types'),
    '#options' => node_type_get_names(),
    '#description' => t('All types will be included if none are selected.'),
  );
}

/**
 * Implements hook_node_delete().
 */
function hipchat_node_node_delete($node) {
  if (!_hipchat_node_is_enabled_type($node)) {
    // Early return if this is not an enabled type.
    return;
  }
  global $user;
  hipchat_send(t('@user_name deleted "@node_title" of type <em>@node_type</em>. !link', array(
    '@user_name' => $user->name,
    '@node_type' => $node->type,
    '@node_title' => $node->title,
    '!link' => l(t('Link'), 'node/' . $node->nid, array('absolute' => TRUE)),
  )));
}

/**
 * Implements hook_node_insert().
 */
function hipchat_node_node_insert($node) {
  if (!_hipchat_node_is_enabled_type($node)) {
    // Early return if this is not an enabled type.
    return;
  }
  global $user;
  hipchat_send(t('@user_name created a new <em>@node_type</em>: "@node_title":<br /> !link', array(
    '@user_name' => $user->name,
    '@node_type' => $node->type,
    '@node_title' => $node->title,
    '!link' => l(t('Link'), 'node/' . $node->nid, array('absolute' => TRUE)),
  )));
}

/**
 * Implements hook_node_update().
 */
function hipchat_node_node_update($node) {
  if (!_hipchat_node_is_enabled_type($node)) {
    // Early return if this is not an enabled type.
    return;
  }
  global $user;
  hipchat_send(t('@user_name edited \"@node_title\" of type <em>@node_type</em>. !link', array(
    '@user_name' => $user->name,
    '@node_type' => $node->type,
    '@node_title' => $node->title,
    '!link' => l(t('Link'), 'node/' . $node->nid, array('absolute' => TRUE)),
  )));
}

/**
 * Implements hook_comment_insert().
 */
function hipchat_node_comment_insert($comment) {
  $node = node_load($comment->nid);
  if (!_hipchat_node_is_enabled_type($node)) {
    // Early return if this is not an enabled type.
    return;
  }
  global $user;
  hipchat_send(t('@user_name added a new comment to "@node_title":<br /> !link', array(
    '@user_name' => $user->name,
    '@node_title' => $node->title,
    '!link' => l(t('Link'), 'node/' . $node->nid, array('absolute' => TRUE, 'fragment' => 'comment-' . $comment->cid)),
  )));
}

/**
 * Implements hook_comment_update().
 */
function hipchat_node_comment_update($comment) {
  $node = node_load($comment->nid);
  if (!_hipchat_node_is_enabled_type($node)) {
    // Early return if this is not an enabled type.
    return;
  }
  global $user;
  hipchat_send(t('@user_name edited their comment to "@node_title". !link', array(
    '@user_name' => $user->name,
    '@node_title' => $node->title,
    '!link' => l(t('Link'), 'node/' . $node->nid, array('absolute' => TRUE, 'fragment' => 'comment-' . $comment->cid)),
  )));
}

/**
 * Implements hook_comment_delete().
 */
function hipchat_node_comment_delete($comment) {
  $node = node_load($comment->nid);
  if (!_hipchat_node_is_enabled_type($node)) {
    // Early return if this is not an enabled type.
    return;
  }
  global $user;
  hipchat_send(t('@user_name deleted a comment on "@node_title". !link', array(
    '@user_name' => $user->name,
    '@node_title' => $node->title,
    '!link' => l(t('Link'), 'node/' . $node->nid, array('absolute' => TRUE)),
  )));
}

/**
 * Helper function determines if a Node is of an enabled type.
 *
 * @param object $node
 *   A Node object with a 'type' property.
 *
 * @return mixed
 *   Returns TRUE if hipchat is enabled for all types.
 */
function _hipchat_node_is_enabled_type($node) {
  $types = variable_get('hipchat_content_types', array());
  // This filter gets us an empty array if no types have been selected.
  $types = array_filter($types, function ($value) {
    return $value !== 0;
  }
  );
  // If none are selected it's enabled for all types.
  if (empty($types)) {
    return TRUE;
  }
  else {
    return array_key_exists($node->type, $types);
  }
}
