<?php
/**
 * @file
 * Hook implementations for HipChat so we can respond to various system events.
 */

/**
 * Implements hook_menu().
 */
function hipchat_menu() {
  $items = array();
  $hipchat_module_url = 'admin/config/services/hipchat';
  $items[$hipchat_module_url] = array(
    'title' => 'HipChat',
    'description' => 'Configure HipChat module.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer hipchat'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items[$hipchat_module_url . '/config'] = array(
    'title' => 'Configuration',
    'description' => 'Adjust HipChat settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hipchat_admin_form'),
    'access arguments' => array('administer hipchat'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hipchat.admin.inc',
  );
  $items[$hipchat_module_url . '/message'] = array(
    'title' => 'Send a message',
    'description' => 'Allows to send a test message to the HipChat.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hipchat_send_test_message_form'),
    'access arguments' => array('administer hipchat'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hipchat.message.inc',
  );
  $user_base = array(
    'page callback' => 'drupal_get_form',
    'access arguments' => array(1),
    'access callback' => 'hipchat_user_profile_access',
    'file' => 'includes/hipchat.user.inc',
  );
	$items['user/%user/hipchat'] = array(
    'title' => 'HipChat',
    'description' => 'Register for a HipChat account.',
    'page arguments' => array(
      'hipchat_user_form',
      1,
		),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	) + $user_base;

  return $items;
}

/**
 * Implements hook_permission().
 */
function hipchat_permission() {
  return array(
    'administer hipchat' => array(
      'title' => t('Administer HipChat'),
      'description' => t('Perform administration tasks for HipChat.'),
    ),
    'use hipchat' => array(
      'title' => t('Use HipChat'),
      'description' => t('Register on HipChat and use it as a regular user.'),
    ),
  );
}

/**
 * Access callback to HipChat form on user profiles.
 */
  function hipchat_user_profile_access($account) {
  global $user;
  return (($user->uid == $account->uid && user_access('use hipchat')) || user_access('administer hipchat'));
}

/**
 * Restricts edit access to HipChat User ID field for non-administrators.
 */
function hipchat_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $current_user = user_uid_optional_load();
  if(!user_access('administer hipchat')) {
    $form['field_hipchat_user_id']['#access'] = FALSE;
  }
}

/**
 * Sends a message to a HipChat room.
 *
 * @param string $message
 *   The message to send. Keep it relatively brief.
 * @param string $room
 *   Room to send the message to.
 */
function hipchat_send($message, $room = null, $token = null) {
  $token = empty($token) ? variable_get('hipchat_token', NULL) : $token;
  $room = empty($room) ? variable_get('hipchat_default_room', 'Lobby') : $room;
  if (empty($room)) {
    return;
  }
  $api_call = '/room/' . urlencode($room) . '/notification';
  $params['message'] = $message;
  $result = hipchat_send_request('POST', $api_call, $params, $token);
  $error = hipchat_get_error_msg($result, 204);
  if (!empty($error)) {
    $params = array(
      '@room' => $room,
      '@msg' => $error,
    );
    watchdog('hipchat', 'Error sending message to room @room: @msg', $params, WATCHDOG_ERROR);
	}
}

/**
 * Creates a user in HipChat.
 *
 * @param string $username
 *   Name of the user to be created.
 * @param string $email
 *   Email address of the user.
 * @param string $password
 *   Password for the user.
 */
function hipchat_create_user($name, $email, $password) {
  $params = array(
		'name' => $name,
		'email' => $email,
    'password' => $password,
	);
  $api_call = '/user';
  $result = hipchat_send_request('POST', $api_call, $params);
  $error = hipchat_get_error_msg($result, 201);
  if (!empty($error)) {
    $msg = 'Error creating HipChat user ' . $name . ': ' . $error . '.';
    drupal_set_message($msg, 'error');
		watchdog('hipchat', $msg, NULL, WATCHDOG_ERROR);
	} else {
    $user = user_load_by_mail($email);
    $user_data = drupal_json_decode($result->data, true);
    $user->field_hipchat_user_id[LANGUAGE_NONE][0]['value'] = $user_data['id'];
    user_save($user, array('hipchat_user_id' => $user_data['id']));
    $msg = 'Created HipChat user ' . $name . '.';
    drupal_set_message($msg, 'status');
		watchdog('hipchat', $msg, NULL, WATCHDOG_INFO);
  }
}

/**
 * Gets user information from HipChat.
 *
 * @param string $id_or_email
 *   HipChat user id or email.
 */
function hipchat_get_user($id_or_email) {
  $api_call = '/user/' . $id_or_email;
  $result = hipchat_send_request('GET', $api_call);
  $error = hipchat_get_error_msg($result, 200);
  if (!empty($error)) {
    $msg = 'Cannot retrieve data of HipChat user ' . $id_or_email . ': ' . $error . '.';
		watchdog('hipchat', $msg, NULL, WATCHDOG_NOTICE);
    return null;
  } else {
    return drupal_json_decode($result->data, true);
  }
}

/**
 * Updates user information in HipChat.
 *
 * @param string $user
 *   Modified user.
 */
function hipchat_sync_user($user, $new_pass = null, $old_email = null) {
  $id_or_email = field_get_items('user', $user, 'field_hipchat_user_id');
  if ($id_or_email) {
    $id_or_email = $user->field_hipchat_user_id[LANGUAGE_NONE][0]['value'];
  } elseif (!$id_or_email && !empty($old_email)) {
    $id_or_email = $old_email;
  } else {
    $id_or_email = $user->mail;
  }
  $user_data = hipchat_get_user($id_or_email);
  if (!is_array($user_data)) {
    return;
  }
  $updates = array(
    'name' => $user->name,
    'mention_name' => preg_replace('/\s+/', '', $user->name),
    'timezone' => $user->timezone,
    'email' => $user->mail,
  );
  if (!empty($new_pass)) {
    $updates['password'] = $new_pass;
  }
  $params = array_replace($user_data, $updates);
  $api_call = '/user/' . $id_or_email;
  $result = hipchat_send_request('PUT', $api_call, $params);
  $error = hipchat_get_error_msg($result, 204);
  if (!empty($error)) {
    $msg = 'Error updating HipChat user ' . $params['name'] . ': ' . $error . '.';
    drupal_set_message($msg, 'error');
		watchdog('hipchat', $msg, NULL, WATCHDOG_ERROR);
	} else {
    $msg = 'Updated HipChat user ' . $params['name'] . '.';
    drupal_set_message($msg, 'status');
		watchdog('hipchat', $msg, NULL, WATCHDOG_INFO);
    hipchat_update_user_photo($user);
  }
}

/**
 * Updates user picture in HipChat.
 *
 * @param string $user
 *   Modified user.
 */
function hipchat_update_user_photo($user) {
  $id_or_email = field_get_items('user', $user, 'field_hipchat_user_id');
  if ($id_or_email) {
    $id_or_email = $user->field_hipchat_user_id[LANGUAGE_NONE][0]['value'];
  } else {
    $id_or_email = $user->mail;
  }
  $picture = null;
  if (!isset($user->picture)) {
    if (module_exists('eve_api')) {
      $character = eve_api_get_basic_character_info($user->name);
      if ($character != FALSE) {
        $picture_url = eve_api_get_eve_avatar($character['characterID']);
      } else {
        return;
      }
    } else {
      return;
    }
  } else {
    $picture_url = $user->picture->url;
  }
  $picture = base64_encode(file_get_contents($picture_url));
  $api_call = '/user/' . $id_or_email . '/photo';
  $params = array('photo' => $picture);
  $result = hipchat_send_request('PUT', $api_call, $params);
  $error = hipchat_get_error_msg($result, 204);
  if (!empty($error)) {
    $msg = 'Error updating photo of HipChat user ' . $user->name . ': ' . $error . '.';
		watchdog('hipchat', $msg, NULL, WATCHDOG_ERROR);
	} else {
    $msg = 'Updated photo of HipChat user ' . $user->name . '.';
		watchdog('hipchat', $msg, NULL, WATCHDOG_INFO);
  }
}

/**
 * Deletes user from HipChat.
 *
 * @param string $id_or_email
 *   HipChat user id or email.
 */
function hipchat_delete_user($id_or_email) {
  $api_call = '/user/' . $id_or_email;
  $result = hipchat_send_request('DELETE', $api_call);
  $error = hipchat_get_error_msg($result, 204);
  if (!empty($error)) {
    $msg = 'Cannot delete HipChat user ' . $id_or_email . ': ' . $error . '.';
		watchdog('hipchat', $msg, NULL, WATCHDOG_ERROR);
	} else {
    $msg = 'Deleted HipChat user ' . $id_or_email . '.';
		watchdog('hipchat', $msg, NULL, WATCHDOG_INFO);
  }
}

/**
 * Sends a request to HipChat v2 API.
 *
 * @param string $type
 *   Type of HTTP request to be made: GET, POST, PUT or DELETE.
 * @param string $api_call
 *   Hipchat v2 API endpoint.
 * @param string $params
 *   Request parameters. Can be null if the API endpoint does not require them.
 * @param string $token
 *   Access token. If not given, the default admin token will be used.
 */
function hipchat_send_request($type, $api_call, $params = null, $token = null) {
  if (empty($token)) {
    $token = variable_get('hipchat_admin_token', NULL);
      if (empty($token)) {
        watchdog('hipchat', 'Access token not configured. Unable to make requests.', NULL, WATCHDOG_ERROR);
        return null;
      }
  }
  $headers = array('Content-Type' => 'application/json');
  $options = array(
    'method' => $type,
    'headers' => $headers,
  );
  if (!empty($params)) {
    $options['data'] = drupal_json_encode($params);
  }
  $sending_url = 'https://api.hipchat.com/v2' . $api_call . '?auth_token=' . $token;
  $result = drupal_http_request($sending_url, $options);
  return $result;
}

/**
 * Retreives HipChat v2 API request error message.
 *
 * @param string $ok_code
 *   Expected response code when no errors have been detected.
*/
 function hipchat_get_error_msg($result, $ok_code) {
  $error_message = null;
  if (isset($result->code) && $result->code != $ok_code) {
    $error = drupal_json_decode($result->data, true);
    if (isset($error) && is_array($error)) {
      $error_message = isset($error['error']['message']) ? $error['error']['message'] : 'Unknown error.';
    }
  }
  return $error_message;
}

/**
 * Deletes user from a room.
 *
 * @param string $room
 *   HipChat room id or name.
 * @param string $user
 *   HipChat user id or email.
 */
function hipchat_delete_user_from_room($room, $user) {
  $api_call = '/room/' . $room . '/member/' . $user;
  $result = hipchat_send_request('DELETE', $api_call);
  $error = hipchat_get_error_msg($result, 204);
  if (!empty($error)) {
    $msg = 'Cannot delete user ' . $user . ' from room ' . $room . ': ' . $error . '.';
		watchdog('hipchat', $msg, NULL, WATCHDOG_ERROR);
	} else {
    $msg = 'Deleted user ' . $user . ' from room ' . $room . ': ' . $error . '.';
		watchdog('hipchat', $msg, NULL, WATCHDOG_INFO);
  }
}

/**
 * Deletes user from a room.
 *
 * @param string $room
 *   HipChat room id or name.
 * @param string $user
 *   HipChat user id or email.
 */
function hipchat_add_user_to_room($room, $user) {
  $api_call = '/room/' . $room . '/member/' . $user;
  $result = hipchat_send_request('PUT', $api_call);
  $error = hipchat_get_error_msg($result, 204);
  if (!empty($error)) {
    $msg = 'Cannot add user ' . $user . ' to room ' . $room . ': ' . $error . '.';
		watchdog('hipchat', $msg, NULL, WATCHDOG_ERROR);
	} else {
    $msg = 'Added user ' . $user . ' to room ' . $room . ': ' . $error . '.';
		watchdog('hipchat', $msg, NULL, WATCHDOG_INFO);
  }
}

