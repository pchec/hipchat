<?php
/**
 * @file
 * Hook implementations for HipChat so we can respond to various system events.
 */

/**
 * Implements hook_menu().
 */
function hipchat_menu() {
  $items = array();
  $hipchat_module_url = 'admin/config/services/hipchat';
  $items[$hipchat_module_url] = array(
    'title' => 'HipChat',
    'description' => 'Configure HipChat module.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer hipchat'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items[$hipchat_module_url . '/config'] = array(
    'title' => 'Configuration',
    'description' => 'Adjust HipChat settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hipchat_admin_form'),
    'access arguments' => array('administer hipchat'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hipchat.admin.inc',
  );
  $items[$hipchat_module_url . '/message'] = array(
    'title' => 'Send a message',
    'description' => 'Allows to send a test message to the HipChat.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hipchat_send_test_message_form'),
    'access arguments' => array('administer hipchat'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/hipchat.message.inc',
  );
  $user_base = array(
    'page callback' => 'drupal_get_form',
    'access arguments' => array(1),
    'access callback' => 'hipchat_user_profile_access',
    'file' => 'includes/hipchat.user.inc',
  );
	$items['user/%user/hipchat'] = array(
    'title' => 'HipChat',
    'description' => 'Register for a HipChat account.',
    'page arguments' => array(
      'hipchat_user_form',
      1,
		),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	) + $user_base;

  return $items;
}

/**
 * Implements hook_permission().
 */
function hipchat_permission() {
  return array(
    'administer hipchat' => array(
      'title' => t('Administer HipChat'),
      'description' => t('Perform administration tasks for HipChat.'),
    ),
    'use hipchat' => array(
      'title' => t('Use HipChat'),
      'description' => t('Register on HipChat and use it as a regular user.'),
    ),
  );
}

/**
 * Access callback to HipChat form on user profiles.
 */
  function hipchat_user_profile_access($account) {
  global $user;
  return (($user->uid == $account->uid && user_access('use hipchat')) || user_access('administer hipchat'));
}

/**
 * Sends a message to a HipChat room.
 *
 * @param string $message
 *   The message to send. Keep it relatively brief.
 * @param string $room
 *   Room to send the message to.
 */
function hipchat_send($message, $room, $token = null) {
  if (empty($token)) {
    $token = variable_get('hipchat_token', NULL);
  }
  $room = empty($room) ? variable_get('hipchat_default_room', 'Lobby') : $room;
  $headers = array(
    'Content-Type' => 'application/json',
  );
  $message_options['message'] = $message;
  $sending_data = drupal_json_encode($message_options);
  $options = array(
    'method' => 'POST',
    'data' => $sending_data,
    'headers' => $headers,
  );
  $sending_url = 'https://api.hipchat.com/v2/room/' . urlencode($room) . '/notification?auth_token=' . $token;
  $result = drupal_http_request($sending_url, $options);
  if (isset($result->code) && $result->code != 204) {
		$params = array(
			'@room' => $room,
			'@msg' => $result->error,
		);
		watchdog('hipchat', 'Error sending message to room @room: @msg', $params, WATCHDOG_ERROR);
	}
}

/**
 * Creates a user in HipChat.
 *
 * @param string $username
 *   Name of the user to be created.
 * @param string $email
 *   Email address of the user.
 * @param string $password
 *   Password for the user.
 */
function hipchat_create_user($name, $email, $password) {
  $token = variable_get('hipchat_admin_token', NULL);
  $headers = array(
    'Content-Type' => 'application/json',
  );
  $message_options = array(
		'name' => $name,
		'email' => $email,
    'password' => $password,
	);
  $sending_data = drupal_json_encode($message_options);
  $options = array(
    'method' => 'POST',
    'data' => $sending_data,
    'headers' => $headers,
  );
  $sending_url = 'https://api.hipchat.com/v2/user?auth_token=' . $token;
  $result = drupal_http_request($sending_url, $options);
  if (isset($result->code) && $result->code != 201) {
    $error = drupal_json_decode($result->data, true);
    $error_message = '';
    if (isset($error) && is_array($error)) {
      $error_message = isset($error['error']['message']) ? $error['error']['message'] :'';
    }
    $msg = 'Error creating HipChat user ' . $name . ': ' . $error_message . '.';
    drupal_set_message($msg, 'error');
		watchdog('hipchat', $msg, NULL, WATCHDOG_ERROR);
	} elseif (isset($result->code) && $result->code == 201) {
    $msg = 'Created HipChat user ' . $name . '.';
    drupal_set_message($msg, 'status');
		watchdog('hipchat', $msg, NULL, WATCHDOG_INFO);
  }
}

/**
 * Gets user information from HipChat.
 *
 * @param string $id_or_email
 *   HipChat user id or email.
 */
function hipchat_get_user($id_or_email) {
  $token = variable_get('hipchat_admin_token', NULL);
  $headers = array(
    'Content-Type' => 'application/json',
  );
  $options = array(
    'method' => 'GET',
    'headers' => $headers,
  );
  $sending_url = 'https://api.hipchat.com/v2/user/' . $id_or_email . '?auth_token=' . $token;
  $result = drupal_http_request($sending_url, $options);
  if (isset($result->code) && $result->code != 200) {
    $error = drupal_json_decode($result->data, true);
    $error_message = '';
    if (isset($error) && is_array($error)) {
      $error_message = isset($error['error']['message']) ? $error['error']['message'] :'';
    }
    $msg = 'Cannot retrieve data of HipChat user ' . $id_or_email . ': ' . $error_message . '.';
		watchdog('hipchat', $msg, NULL, WATCHDOG_NOTICE);
    return null;
  } else {
    return drupal_json_decode($result->data, true);
  }
}

/**
 * Updates user information in HipChat.
 *
 * @param string $id_or_email
 *   HipChat user id or email.
 * @param array $changes
 *   Modified user attributes given as array('name' => 'value').
 */
function hipchat_update_user($id_or_email, $changes) {
  $user_data = hipchat_get_user($id_or_email);
  if (!is_array($user_data)) {
    return null;
  }
  $new_user_data = array_replace($user_data, $changes);
  $sending_data = drupal_json_encode($new_user_data);
  $token = variable_get('hipchat_admin_token', NULL);
  $headers = array(
    'Content-Type' => 'application/json',
  );
  $options = array(
    'method' => 'PUT',
    'data' => $sending_data,
    'headers' => $headers,
  );
  $sending_url = 'https://api.hipchat.com/v2/user/' . $id_or_email . '?auth_token=' . $token;
  $result = drupal_http_request($sending_url, $options);
  if (isset($result->code) && $result->code != 204) {
    $error = drupal_json_decode($result->data, true);
    $error_message = '';
    if (isset($error) && is_array($error)) {
      $error_message = isset($error['error']['message']) ? $error['error']['message'] :'';
    }
    $msg = 'Error updating HipChat user ' . $new_user_data['name'] . ': ' . $error_message . '.';
    drupal_set_message($msg, 'error');
		watchdog('hipchat', $msg, NULL, WATCHDOG_ERROR);
	} elseif (isset($result->code) && $result->code == 204) {
    $msg = 'Updated HipChat user ' . $new_user_data['name'] . '.';
    drupal_set_message($msg, 'status');
		watchdog('hipchat', $msg, NULL, WATCHDOG_INFO);
  }
}

/**
 * Deltes user from HipChat.
 *
 * @param string $id_or_email
 *   HipChat user id or email.
 */
function hipchat_delete_user($id_or_email) {
  $token = variable_get('hipchat_admin_token', NULL);
  $headers = array(
    'Content-Type' => 'application/json',
  );
  $options = array(
    'method' => 'DELETE',
    'headers' => $headers,
  );
  $sending_url = 'https://api.hipchat.com/v2/user/' . $id_or_email . '?auth_token=' . $token;
  $result = drupal_http_request($sending_url, $options);
  if (isset($result->code) && $result->code != 204) {
    $error = drupal_json_decode($result->data, true);
    $error_message = '';
    if (isset($error) && is_array($error)) {
      $error_message = isset($error['error']['message']) ? $error['error']['message'] :'';
    }
    $msg = 'Cannot delete HipChat user ' . $id_or_email . ': ' . $error_message . '.';
		watchdog('hipchat', $msg, NULL, WATCHDOG_ERROR);
    return null;
  } else {
    return drupal_json_decode($result->data, true);
  }
}
